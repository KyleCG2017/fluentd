apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: fluentd-application
  namespace: argocd
spec:
  project: default
  destination:
    server: "https://kubernetes.default.svc"
    namespace: default
  source:
    chart: fluentd
    repoURL: registry-1.docker.io/bitnamicharts
    targetRevision: 7.1.5
    helm:
      parameters:
        - name: image.repository
          value: fluent/fluentd-kubernetes-daemonset
        - name: image.tag
          value: v1.18-debian-cloudwatch-1
        - name: resources.requests.cpu
          value: "10m"
        - name: resources.requests.memory
          value: 128Mi
        - name: resources.limits.memory
          value: 128Mi
        - name: autoscaling.enabled
          value: "true"
        - name: autoscaling.minReplicas
          value: "1"
        - name: autoscaling.maxReplicas
          value: "2"
        - name: autoscaling.targetCPUUtilizationPercentage
          value: "80"
        - name: serviceAccount.create
          value: "true"
        - name: serviceAccount.name
          value: fluentd-role
        - name: plugins[0]
          value: fluent-plugin-grafana-loki
        - name: plugins[1]
          value: fluent-plugin-cloudwatch-logs
        - name: fileConfigs.01_sources.conf
          value: |
          <source>
            @type cloudwatch_logs
            region eu-west-1
            log_group_name awie-g3-d-ktyaa-app-01-log
            log_stream_name i-0ba38e333685bf55655db9
            # aws_sts_role_arn arn:aws:iam::72754549456547879:role/awie-iamr-ngdev-api-fluentd
            tag cloudwatch.app
            <parse>
              @type json
            </parse>
          </source>

          <source>
            @type cloudwatch_logs
            region eu-west-1
            log_group_name awie-g3-d-ktyaa-app-01-log
            log_stream_name i-0ba38e333685bf55655db9
            # aws_sts_role_arn arn:aws:iam::72754549456547879:role/awie-iamr-ngdev-api-fluentd
            tag cloudwatch.app
            <parse>
              @type json
            </parse>
          </source>

          <source>
            @type prometheus
            bind 0.0.0.0
            port 24231
            metrics_path /metrics
          </source>

        - name: fileConfigs.02_filters.conf
          value: ""

        - name: fileConfigs.03_dispatch.conf
          value: ""

        - name: fileConfigs.04_outputs.conf
          value: |
            <match **>
              @type stdout
              log_level info
            </match>

        - name: livenessProbe.httpGet.path
          value: /metrics

        - name: livenessProbe.httpGet.port
          value: forwarder

        - name: livenessProbe.httpGet.initialDelaySeconds
          value: "60"

        - name: livenessProbe.httpGet.periodSeconds
          value: "15"

        - name: livenessProbe.httpGet.timeoutSeconds
          value: "5"

        - name: livenessProbe.httpGet.successThreshold
          value: "1"

        - name: livenessProbe.httpGet.failureThreshold
          value: "5"

        - name: readinessProbe.httpGet.path
          value: /metrics

        - name: readinessProbe.httpGet.port
          value: forwarder

        - name: readinessProbe.httpGet.initialDelaySeconds
          value: "30"

        - name: readinessProbe.httpGet.periodSeconds
          value: "10"

        - name: readinessProbe.httpGet.timeoutSeconds
          value: "5"

        - name: readinessProbe.httpGet.successThreshold
          value: "1"

        - name: readinessProbe.httpGet.failureThreshold
          value: "3"

        - name: service.enabled
          value: "true"

        - name: service.type
          value: "ClusterIP"

        - name: service.ports[0].name
          value: "forwarder"

        - name: service.ports[0].protocol
          value: "TCP"

        - name: service.ports[0].containerport
          value: "24224"

